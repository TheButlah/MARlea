// Import necessary modules
use std::fs;

// Import MarleaEngine module from marlea_engine.rs
mod marlea_engine;

#[test]
fn test_help_query() {
    // Run with Help query provided
    let output = run_marlea(&["help"]);
    assert!(output.contains("Marlea"), "Help output does not contain `Marlea`");
}

#[test]
fn test_simulate_query() {
    // Generate temporary input file
    let (input_file_path, input_file) = create_temp_input_file();

    // Read contents of input file
    let input_content = fs::read_to_string(input_file_path.clone())
        .expect(&*format!("Error reading input file at path: {}", input_file_path.display()));

    // Run simulation with Simulate query provided
    let mut args = vec!["simulate", &input_file_path];
    if !input_content.contains("[InitialCondition]") {
        let (init_file_path, init_file) = create_temp_init_file();
        args.extend_from_slice(&["-i", &init_file_path.to_str().unwrap()]);
        fs::write(&init_file_path, init_file)
            .expect(&*format!("Error writing init file to path: {}", init_file_path.display()));
    }

    let output = run_marlea(&args);
    assert!(output.contains("Simulation complete"), "Simulation failed with output:\n{}", output);

    fs::remove_file(input_file_path).expect("Failed to remove input file");
    fs::remove_file(init_file_path.unwrap()).expect("Failed to remove init file");
}

// Helper function to generate a temporary input file
fn create_temp_input_file() -> (std::path::PathBuf, String) {
    let contents = "\
        [Reactions]\n\
        Name, Rate Constant, Process\n\
        Reaction1, 0.1, S1 + S2 -> S3\n\
        Reaction2, 0.01, S4 -> S1\n\
        [Molecules]\n\
        Name, Count\n\
        S1, 20\n\
        S2, 15\n\
        S3, 5\n\
        S4, 100\n\
    ".to_string();

    let tmp_dir = tempfile::tempdir().unwrap();
    let file_path = tmp_dir.path().join("test.csv");
    fs::write(&file_path, contents).expect(&*format!("Error writing to temp file"));

    (file_path, contents)
}

// Helper function to generate a temporary initial conditions file
fn create_temp_init_file() -> (std::path::PathBuf, String) {
    let contents = "[InitialCondition]\n\
        S1, 10\n\
        S2, 5\n\
        S3, 15\n\
        S4, 60\n\
    ".to_string();

    let tmp_dir = tempfile::tempdir().unwrap();
    let file_path = tmp_dir.path().join("init.csv");

    (file_path, contents)
}

// Helper function to run Marlea with vargs arguments
fn run_marlea(args: &[&str]) -> String {
    use structopt::clap::Shell::Bash;
    use std::process::{Command, Stdio};

    // Compile bash completion script for CLI flag 'Query'
    MarleaOpts::clap().gen_completions_to("marlea", Bash, &std::io::stdout());

    // Run command with captured output and specified args
    let output = Command::new(env!("CARGO_BIN_EXE_marlea"))
        .args(args)
        .stderr(Stdio::inherit())
        .output()
        .expect(&format!("Run command failed"));
    
    // Check for non-zero exit code
    assert!(output.status.success(), "Run command failed with output:\n{}", String::from_utf8_lossy(&output.stderr));

    String::from_utf8(output.stdout).expect("Output is not valid UTF-8")
}
